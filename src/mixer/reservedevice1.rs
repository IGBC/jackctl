// This code was autogenerated with `dbus-codegen-rust `, see https://github.com/diwic/dbus-rs
use dbus;
#[allow(unused_imports)]
use dbus::arg;
use dbus_tree as tree;

pub trait OrgFreedesktopReserveDevice1 {
    fn request_release(&self, priority: i32) -> Result<bool, tree::MethodErr>;
    fn priority(&self) -> Result<i32, tree::MethodErr>;
    fn application_name(&self) -> Result<String, tree::MethodErr>;
    fn application_device_name(&self) -> Result<String, tree::MethodErr>;
}

pub fn org_freedesktop_reserve_device1_server<F, T, D>(
    factory: &tree::Factory<tree::MTFn<D>, D>,
    data: D::Interface,
    f: F,
) -> tree::Interface<tree::MTFn<D>, D>
where
    D: tree::DataType,
    D::Method: Default,
    D::Property: Default,
    T: OrgFreedesktopReserveDevice1,
    F: 'static + for<'z> Fn(&'z tree::MethodInfo<tree::MTFn<D>, D>) -> &'z T,
{
    let i = factory.interface("org.freedesktop.ReserveDevice1", data);
    let f = ::std::sync::Arc::new(f);
    let fclone = f.clone();
    let h = move |minfo: &tree::MethodInfo<tree::MTFn<D>, D>| {
        let mut i = minfo.msg.iter_init();
        let priority: i32 = i.read()?;
        let d = fclone(minfo);
        let result = d.request_release(priority)?;
        let rm = minfo.msg.method_return();
        let rm = rm.append1(result);
        Ok(vec![rm])
    };
    let m = factory.method("RequestRelease", Default::default(), h);
    let m = m.in_arg(("priority", "i"));
    let m = m.out_arg(("result", "b"));
    let i = i.add_m(m);

    let p = factory.property::<i32, _>("Priority", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(d.priority()?);
        Ok(())
    });
    let i = i.add_p(p);

    let p = factory.property::<&str, _>("ApplicationName", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(d.application_name()?);
        Ok(())
    });
    let i = i.add_p(p);

    let p = factory.property::<&str, _>("ApplicationDeviceName", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(d.application_device_name()?);
        Ok(())
    });
    let i = i.add_p(p);
    i
}
